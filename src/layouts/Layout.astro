---
export interface Props {
  title: string;
  metaDescription?: string;
}

const { title = "CDO as a Service", metaDescription } = Astro.props;
---

<!DOCTYPE html>
<html lang="lt">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link
      href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700|Noto+Sans:300,400,500,600,700,800|PT+Mono:300,400,500,600,700"
      rel="stylesheet"
    />
    <title>{title}</title>
    <meta name="description" content={metaDescription} />
    <meta name="generator" content={Astro.generator} />
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" integrity="sha512-1ycn6IcaQQ40/MKBW2W4Rhis/DbILU74C1vSrLJxCq57o941Ym01SwNsOMqvEBFlcgUa6xLiPY/NS5R+E6ztJQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    
    <!-- Translations script -->
    <script is:inline>
      // Client-side script to handle translations
      document.addEventListener('DOMContentLoaded', function() {
        // Function to apply translations
        function applyTranslations(language) {
          console.log('Applying translations for language:', language);
          fetch(`/translations/${language}.json`)
            .then(response => response.json())
            .then(translations => {
              document.querySelectorAll('[data-i18n]').forEach(element => {
                const key = element.getAttribute('data-i18n');
                if (translations[key]) {
                  if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {
                    element.placeholder = translations[key];
                    // For labels, also update the text content
                    if (element.previousElementSibling && element.previousElementSibling.hasAttribute('for')) {
                      element.previousElementSibling.textContent = translations[key];
                    }
                  } else if (element.tagName === 'BUTTON') {
                    element.textContent = translations[key];
                  } else {
                    element.textContent = translations[key];
                  }
                } else {
                  console.warn(`Translation key not found: ${key}`);
                }
              });
            })
            .catch(error => {
              console.error('Error loading translations:', error);
            });
        }
        
        // Get language preference
        const urlParams = new URLSearchParams(window.location.search);
        const langParam = urlParams.get('lang');
        const savedLang = localStorage.getItem('preferred_language');
        
        // Apply translations based on language preference
        const language = langParam || savedLang || 'lt';
        console.log('Selected language:', language);
        applyTranslations(language);
        
        // Save language preference
        if (langParam) {
          localStorage.setItem('preferred_language', langParam);
        }
        
        // Update all navigation links to include the current language
        const currentLang = langParam || savedLang || 'lt';
        document.querySelectorAll('a[href]').forEach(link => {
          const href = link.getAttribute('href');
          // Only process internal links (not external or hash links)
          if (href && href.startsWith('/') && !href.startsWith('//') && !href.startsWith('/#')) {
            // Don't modify if it already has a lang parameter
            if (!href.includes('?lang=') && !href.includes('&lang=')) {
              const hasParams = href.includes('?');
              const newHref = hasParams 
                ? `${href}&lang=${currentLang}` 
                : `${href}?lang=${currentLang}`;
              link.setAttribute('href', newHref);
            }
          }
        });
      });
    </script>
    
    <!-- Script to remove promotional banner -->
    <script is:inline>
      document.addEventListener('DOMContentLoaded', function() {
        // Function to remove the promotional banner
        function removePromoBanner() {
          // Look for elements containing the text from the promo banner
          const elements = document.querySelectorAll('*');
          for (let i = 0; i < elements.length; i++) {
            const el = elements[i];
            if (el.textContent && el.textContent.includes('Be Strong in 2025') && el.textContent.includes('All-Access Pass')) {
              // Found the banner, remove it
              el.style.display = 'none';
              // If we find a specific parent that seems to be the container, remove that too
              let parent = el.parentElement;
              for (let j = 0; j < 3; j++) { // Check up to 3 levels up
                if (parent && (parent.classList.contains('promo-bar') || 
                   parent.classList.contains('announcement') || 
                   parent.classList.contains('banner') ||
                   parent.style.position === 'fixed')) {
                  parent.style.display = 'none';
                  break;
                }
                if (parent) parent = parent.parentElement;
              }
            }
          }
        }
        
        // Run immediately
        removePromoBanner();
        
        // Also run after a short delay to catch any dynamically added elements
        setTimeout(removePromoBanner, 500);
        setTimeout(removePromoBanner, 1500);
        setTimeout(removePromoBanner, 3000);
        
        // Create a MutationObserver to watch for dynamically added banners
        const observer = new MutationObserver(function(mutations) {
          removePromoBanner();
        });
        
        // Start observing the document with the configured parameters
        observer.observe(document.body, { childList: true, subtree: true });
      });
    </script>
    
    <!-- Google Tag Manager -->
    <script>
      (function (w, d, s, l, i) {
        w[l] = w[l] || [];
        w[l].push({ "gtm.start": new Date().getTime(), event: "gtm.js" });
        var f = d.getElementsByTagName(s)[0],
          j = d.createElement(s),
          dl = l != "dataLayer" ? "&l=" + l : "";
        j.async = true;
        j.src = "https://www.googletagmanager.com/gtm.js?id=" + i + dl;
        f.parentNode.insertBefore(j, f);
      })(window, document, "script", "dataLayer", "GTM-NKDMSK6");
    </script>
    <!-- End Google Tag Manager -->
  </head>
  <body class="antialiased bg-white">
    <!-- Google Tag Manager (noscript) -->
    <noscript>
      <iframe
        src="https://www.googletagmanager.com/ns.html?id=GTM-NKDMSK6"
        height="0"
        width="0"
        style="display:none;visibility:hidden">
      </iframe>
    </noscript>
    <!-- End Google Tag Manager (noscript) -->
    <slot />
    <script>
      // Debug script to check for image loading issues
      document.addEventListener('DOMContentLoaded', function() {
        console.log('Checking image loading...');
        
        // Check SVG images
        const svgImages = document.querySelectorAll('img[src$=".svg"]');
        svgImages.forEach(img => {
          console.log(`SVG image: ${img.src}, alt: ${img.alt}, display: ${window.getComputedStyle(img).display}, visibility: ${window.getComputedStyle(img).visibility}, width: ${img.offsetWidth}, height: ${img.offsetHeight}`);
          
          // Add error handler
          img.onerror = function() {
            console.error(`Failed to load SVG: ${img.src}`);
          };
          
          // Add load handler
          img.onload = function() {
            console.log(`Successfully loaded SVG: ${img.src}`);
          };
        });
        
        // Check all other images
        const allImages = document.querySelectorAll('img:not([src$=".svg"])');
        allImages.forEach(img => {
          // Add error handler
          img.onerror = function() {
            console.error(`Failed to load image: ${img.src}`);
          };
        });
      });
    </script>
  </body>
</html>
<style is:global>
  code {
    font-family: Menlo, Monaco, Lucida Console, Liberation Mono,
      DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace;
  }
</style>
