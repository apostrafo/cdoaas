---
export interface Props {
  title: string;
  metaDescription?: string;
}

const { title = "CDO as a Service", metaDescription } = Astro.props;
---

<!DOCTYPE html>
<html lang="lt">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <!-- Block Tim script loading - needs to be at the very top -->
    <script is:inline>
      // Block any script loading from Creative Tim
      const originalCreateElement = document.createElement;
      document.createElement = function(tag) {
        const element = originalCreateElement.call(document, tag);
        if (tag.toLowerCase() === 'script') {
          const originalSetAttribute = element.setAttribute;
          element.setAttribute = function(name, value) {
            if (name === 'src' && (value.includes('creative-tim') || value.includes('ct.js') || value.includes('ct-'))) {
              console.log('Blocked script loading:', value);
              return;
            }
            return originalSetAttribute.call(this, name, value);
          };
        }
        return element;
      };
      
      // Also block script loading via document.write
      const originalDocumentWrite = document.write;
      document.write = function(html) {
        if (html.includes('creative-tim') || html.includes('ct.js') || html.includes('ct-')) {
          console.log('Blocked document.write:', html);
          return;
        }
        return originalDocumentWrite.call(document, html);
      };
      
      // Block appendChild for scripts from Creative Tim
      const originalAppendChild = Node.prototype.appendChild;
      Node.prototype.appendChild = function(node) {
        if (node.nodeName === 'SCRIPT' && node.src && 
            (node.src.includes('creative-tim') || node.src.includes('ct.js') || node.src.includes('ct-'))) {
          console.log('Blocked script append:', node.src);
          return document.createComment('Blocked script: ' + node.src);
        }
        return originalAppendChild.call(this, node);
      };
    </script>
    
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link
      href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700|Noto+Sans:300,400,500,600,700,800|PT+Mono:300,400,500,600,700"
      rel="stylesheet"
    />
    <title>{title}</title>
    <meta name="description" content={metaDescription} />
    <meta name="generator" content={Astro.generator} />
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" integrity="sha512-1ycn6IcaQQ40/MKBW2W4Rhis/DbILU74C1vSrLJxCq57o941Ym01SwNsOMqvEBFlcgUa6xLiPY/NS5R+E6ztJQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    
    <!-- Add immediate banner removal -->
    <style>
      /* Aggressive Tim banner removal */
      .ct-docs-navbar-top, 
      .fixed-top.ct-docs-navbar,
      div[style*="position: fixed"][style*="top:0"],
      nav[style*="position: fixed"][style*="top:0"],
      header[style*="position: fixed"][style*="top:0"],
      .promo-banner, 
      .announcement-bar, 
      .top-banner, 
      .promo-bar, 
      .ct-promo,
      [class*="ct-"],
      [id*="ct-"],
      [class*="creative-tim"],
      [id*="creative-tim"],
      [href*="creative-tim"] {
        display: none !important;
        opacity: 0 !important;
        visibility: hidden !important;
        pointer-events: none !important;
        height: 0 !important;
        position: absolute !important;
        top: -9999px !important;
        left: -9999px !important;
        z-index: -9999 !important;
      }
    </style>
    
    <!-- Immediate Banner Removal Script -->
    <script is:inline>
      (function() {
        // Execute immediately
        function removeBanner() {
          // Target elements by various attributes
          const possibleBanners = [
            '.ct-docs-navbar-top', 
            '.fixed-top.ct-docs-navbar',
            '.promo-banner', 
            '.announcement-bar', 
            '.top-banner', 
            '.promo-bar', 
            '.ct-promo',
            '[class*="ct-"]',
            '[id*="ct-"]',
            '[class*="creative-tim"]',
            '[id*="creative-tim"]'
          ];
          
          // Remove all possible banners
          possibleBanners.forEach(selector => {
            document.querySelectorAll(selector).forEach(el => {
              el.remove();
            });
          });
          
          // Remove elements with fixed positioning at top
          document.querySelectorAll('div[style*="position: fixed"][style*="top:0"], nav[style*="position: fixed"][style*="top:0"], header[style*="position: fixed"][style*="top:0"]').forEach(el => {
            el.remove();
          });
          
          // Remove iframe elements that might contain the banner
          document.querySelectorAll('iframe').forEach(frame => {
            if (frame.src && frame.src.includes('creative-tim')) {
              frame.remove();
            }
          });
          
          // Remove script tags that might inject the banner
          document.querySelectorAll('script').forEach(script => {
            if (script.src && script.src.includes('creative-tim')) {
              script.remove();
            }
          });
        }
        
        // Run immediately
        removeBanner();
        
        // Run when DOM is ready
        document.addEventListener('DOMContentLoaded', function() {
          removeBanner();
          
          // Run again after a delay to catch elements added later
          setTimeout(removeBanner, 100);
          setTimeout(removeBanner, 500);
          setTimeout(removeBanner, 1500);
          setTimeout(removeBanner, 3000);
        });
        
        // Also handle dynamically added elements
        const observer = new MutationObserver(function() {
          removeBanner();
        });
        
        // Start observing the document body for changes
        observer.observe(document.documentElement || document.body, {
          childList: true,
          subtree: true
        });
      })();
    </script>
    
    <!-- Netlify Identity Widget -->
    <script src="https://identity.netlify.com/v1/netlify-identity-widget.js"></script>
    
    <!-- Translations script -->
    <script is:inline>
      // Client-side script to handle translations
      document.addEventListener('DOMContentLoaded', function() {
        // Function to apply translations
        function applyTranslations(language) {
          console.log('Applying translations for language:', language);
          fetch(`/translations/${language}.json`)
            .then(response => response.json())
            .then(translations => {
              document.querySelectorAll('[data-i18n]').forEach(element => {
                const key = element.getAttribute('data-i18n');
                if (translations[key]) {
                  if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {
                    element.placeholder = translations[key];
                    // For labels, also update the text content
                    if (element.previousElementSibling && element.previousElementSibling.hasAttribute('for')) {
                      element.previousElementSibling.textContent = translations[key];
                    }
                  } else if (element.tagName === 'BUTTON') {
                    element.textContent = translations[key];
                  } else {
                    element.textContent = translations[key];
                  }
                } else {
                  console.warn(`Translation key not found: ${key}`);
                }
              });
            })
            .catch(error => {
              console.error('Error loading translations:', error);
            });
        }
        
        // Get language preference
        const urlParams = new URLSearchParams(window.location.search);
        const langParam = urlParams.get('lang');
        const savedLang = localStorage.getItem('preferred_language');
        
        // Apply translations based on language preference
        const language = langParam || savedLang || 'lt';
        console.log('Selected language:', language);
        applyTranslations(language);
        
        // Update all navigation links to include the current language
        const currentLang = langParam || savedLang || 'lt';
        document.querySelectorAll('a[href]').forEach(link => {
          const href = link.getAttribute('href');
          // Only process internal links (not external or hash links)
          if (href && href.startsWith('/') && !href.startsWith('//') && !href.startsWith('/#')) {
            // Don't modify if it already has a lang parameter
            if (!href.includes('?lang=') && !href.includes('&lang=')) {
              const hasParams = href.includes('?');
              const newHref = hasParams 
                ? `${href}&lang=${currentLang}` 
                : `${href}?lang=${currentLang}`;
              link.setAttribute('href', newHref);
            }
          }
        });
      });
    </script>
    
    <!-- Google Tag Manager -->
    <script>
      (function (w, d, s, l, i) {
        w[l] = w[l] || [];
        w[l].push({ "gtm.start": new Date().getTime(), event: "gtm.js" });
        var f = d.getElementsByTagName(s)[0],
          j = d.createElement(s),
          dl = l != "dataLayer" ? "&l=" + l : "";
        j.async = true;
        j.src = "https://www.googletagmanager.com/gtm.js?id=" + i + dl;
        f.parentNode.insertBefore(j, f);
      })(window, document, "script", "dataLayer", "GTM-NKDMSK6");
    </script>
    <!-- End Google Tag Manager -->
  </head>
  <body class="antialiased bg-white">
    <!-- Google Tag Manager (noscript) -->
    <noscript>
      <iframe
        src="https://www.googletagmanager.com/ns.html?id=GTM-NKDMSK6"
        height="0"
        width="0"
        style="display:none;visibility:hidden">
      </iframe>
    </noscript>
    <!-- End Google Tag Manager (noscript) -->
    <slot />
    <script>
      // Debug script to check for image loading issues
      document.addEventListener('DOMContentLoaded', function() {
        console.log('Checking image loading...');
        
        // Check SVG images
        const svgImages = document.querySelectorAll('img[src$=".svg"]');
        svgImages.forEach(img => {
          console.log(`SVG image: ${img.src}, alt: ${img.alt}, display: ${window.getComputedStyle(img).display}, visibility: ${window.getComputedStyle(img).visibility}, width: ${img.offsetWidth}, height: ${img.offsetHeight}`);
          
          // Add error handler
          img.onerror = function() {
            console.error(`Failed to load SVG: ${img.src}`);
          };
          
          // Add load handler
          img.onload = function() {
            console.log(`Successfully loaded SVG: ${img.src}`);
          };
        });
        
        // Check all other images
        const allImages = document.querySelectorAll('img:not([src$=".svg"])');
        allImages.forEach(img => {
          // Add error handler
          img.onerror = function() {
            console.error(`Failed to load image: ${img.src}`);
          };
        });
      });
    </script>
    
    <!-- Netlify Identity inicializacija -->
    <script>
      if (window.netlifyIdentity) {
        window.netlifyIdentity.on("init", user => {
          if (!user) {
            window.netlifyIdentity.on("login", () => {
              document.location.href = "/admin/";
            });
          }
        });
      }
    </script>
  </body>
</html>
<style is:global>
  code {
    font-family: Menlo, Monaco, Lucida Console, Liberation Mono,
      DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace;
  }
  
  /* Remove Creative Tim promotional elements */
  .ct-docs-navbar-top, 
  .fixed-top.ct-docs-navbar,
  div[style*="position: fixed"][style*="top:0"]:has(a[href*="creative-tim"]),
  nav[style*="position: fixed"][style*="top:0"]:has(a[href*="creative-tim"]),
  header[style*="position: fixed"][style*="top:0"]:has(a[href*="creative-tim"]),
  .promo-banner, 
  .announcement-bar, 
  .top-banner, 
  .promo-bar, 
  .ct-promo {
    display: none !important;
  }
</style>
